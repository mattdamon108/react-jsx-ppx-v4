// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as JsxRuntime from "react/jsx-runtime";

var context = React.createContext("Dark");

var make = context.Provider;

var Provider = {
  make: make
};

var ThemeContext = {
  context: context,
  Provider: Provider
};

function ContextProvider$Button(props) {
  var className;
  className = props.theme === "Light" ? "theme-light" : "theme-black";
  return JsxRuntime.jsx("button", {
              children: "Click me",
              className: className
            });
}

var Button = {
  make: ContextProvider$Button
};

function ContextProvider$ThemedButton(props) {
  var theme = React.useContext(context);
  return JsxRuntime.jsx(ContextProvider$Button, {
              theme: theme
            });
}

var ThemedButton = {
  make: ContextProvider$ThemedButton
};

function ContextProvider$Toolbar(props) {
  return JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(ContextProvider$ThemedButton, {})
            });
}

var Toolbar = {
  make: ContextProvider$Toolbar
};

function ContextProvider(props) {
  return JsxRuntime.jsx(make, {
              value: "Light",
              children: JsxRuntime.jsx("div", {
                    children: JsxRuntime.jsx(ContextProvider$Toolbar, {})
                  })
            });
}

var make$1 = ContextProvider;

export {
  ThemeContext ,
  Button ,
  ThemedButton ,
  Toolbar ,
  make$1 as make,
}
/* context Not a pure module */
